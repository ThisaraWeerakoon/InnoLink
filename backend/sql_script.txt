DROP SCHEMA IF EXISTS innolink_db;
CREATE SCHEMA innolink_db;
USE innolink_db;

-- DROP existing tables
DROP TABLE IF EXISTS `comments`;
DROP TABLE IF EXISTS `follows`;
DROP TABLE IF EXISTS `likes`;
DROP TABLE IF EXISTS `posts`;
DROP TABLE IF EXISTS `users`;

-- CREATE users table
CREATE TABLE `users` (
	`id` VARCHAR(191) NOT NULL,
	`name` VARCHAR(191),
	`email` VARCHAR(191) NOT NULL,
	`first_name` VARCHAR(191) NOT NULL,
	`last_name` VARCHAR(191) NOT NULL,
	`dob` DATE NOT NULL,
	`created_at` TIMESTAMP NOT NULL,
	`profile_pic_url` VARCHAR(191),
	`password` VARCHAR(191) NOT NULL,
	PRIMARY KEY(`id`)
);

-- CREATE posts table
CREATE TABLE `posts` (
	`id` VARCHAR(191) NOT NULL,
	`img_url` VARCHAR(191),
	`video_url` VARCHAR(191),
	`created_at` TIMESTAMP NOT NULL,
	`caption` VARCHAR(191) NOT NULL,
	`userId` VARCHAR(191) NOT NULL,
	PRIMARY KEY(`id`),
	FOREIGN KEY(`userId`) REFERENCES `users`(`id`)
		ON DELETE CASCADE
		ON UPDATE CASCADE
);

-- CREATE likes table
CREATE TABLE `likes` (
	`id` VARCHAR(191) NOT NULL,
	`created_at` TIMESTAMP NOT NULL,
	`active` BOOLEAN NOT NULL,
	`userId` VARCHAR(191) NOT NULL,
	`postId` VARCHAR(191) NOT NULL,
	PRIMARY KEY(`id`),
	FOREIGN KEY(`userId`) REFERENCES `users`(`id`)
		ON DELETE CASCADE
		ON UPDATE CASCADE,
	FOREIGN KEY(`postId`) REFERENCES `posts`(`id`)
		ON DELETE CASCADE
		ON UPDATE CASCADE
);

-- CREATE follows table
CREATE TABLE `follows` (
	`id` VARCHAR(191) NOT NULL,
	`created_at` TIMESTAMP NOT NULL,
	`followerId` VARCHAR(191) NOT NULL,
	`followingId` VARCHAR(191) NOT NULL,
	PRIMARY KEY(`id`),
	FOREIGN KEY(`followerId`) REFERENCES `users`(`id`)
		ON DELETE CASCADE
		ON UPDATE CASCADE,
	FOREIGN KEY(`followingId`) REFERENCES `users`(`id`)
		ON DELETE CASCADE
		ON UPDATE CASCADE
);

-- CREATE comments table
CREATE TABLE `comments` (
	`id` VARCHAR(191) NOT NULL,
	`content` VARCHAR(191) NOT NULL,
	`created_at` TIMESTAMP NOT NULL,
	`userId` VARCHAR(191) NOT NULL,
	`postId` VARCHAR(191) NOT NULL,
	PRIMARY KEY(`id`),
	FOREIGN KEY(`userId`) REFERENCES `users`(`id`)
		ON DELETE CASCADE
		ON UPDATE CASCADE,
	FOREIGN KEY(`postId`) REFERENCES `posts`(`id`)
		ON DELETE CASCADE
		ON UPDATE CASCADE
);
